package com.csw.android.videofloatwindow.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.csw.android.videofloatwindow.entities.VideoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_INFO".
*/
public class VideoInfoDao extends AbstractDao<VideoInfo, Long> {

    public static final String TABLENAME = "VIDEO_INFO";

    /**
     * Properties of entity VideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property FilePath = new Property(1, String.class, "filePath", false, "FILE_PATH");
        public final static Property Duration = new Property(2, long.class, "duration", false, "DURATION");
        public final static Property FileSize = new Property(3, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "FILE_NAME");
        public final static Property MediaDbId = new Property(5, long.class, "mediaDbId", false, "MEDIA_DB_ID");
        public final static Property Width = new Property(6, int.class, "width", false, "WIDTH");
        public final static Property Height = new Property(7, int.class, "height", false, "HEIGHT");
        public final static Property Resolution = new Property(8, String.class, "resolution", false, "RESOLUTION");
    }


    public VideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"FILE_PATH\" TEXT," + // 1: filePath
                "\"DURATION\" INTEGER NOT NULL ," + // 2: duration
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 3: fileSize
                "\"FILE_NAME\" TEXT," + // 4: fileName
                "\"MEDIA_DB_ID\" INTEGER NOT NULL UNIQUE ," + // 5: mediaDbId
                "\"WIDTH\" INTEGER NOT NULL ," + // 6: width
                "\"HEIGHT\" INTEGER NOT NULL ," + // 7: height
                "\"RESOLUTION\" TEXT);"); // 8: resolution
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
        stmt.bindLong(3, entity.getDuration());
        stmt.bindLong(4, entity.getFileSize());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getMediaDbId());
        stmt.bindLong(7, entity.getWidth());
        stmt.bindLong(8, entity.getHeight());
 
        String resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindString(9, resolution);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
        stmt.bindLong(3, entity.getDuration());
        stmt.bindLong(4, entity.getFileSize());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getMediaDbId());
        stmt.bindLong(7, entity.getWidth());
        stmt.bindLong(8, entity.getHeight());
 
        String resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindString(9, resolution);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public VideoInfo readEntity(Cursor cursor, int offset) {
        VideoInfo entity = new VideoInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filePath
            cursor.getLong(offset + 2), // duration
            cursor.getLong(offset + 3), // fileSize
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileName
            cursor.getLong(offset + 5), // mediaDbId
            cursor.getInt(offset + 6), // width
            cursor.getInt(offset + 7), // height
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // resolution
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFilePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDuration(cursor.getLong(offset + 2));
        entity.setFileSize(cursor.getLong(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMediaDbId(cursor.getLong(offset + 5));
        entity.setWidth(cursor.getInt(offset + 6));
        entity.setHeight(cursor.getInt(offset + 7));
        entity.setResolution(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
